1) - EF query in solution repository (WheelzyChallenge.Infrastructure.Repositories.CarRepository.cs)
   - SQL query in file "SQLQuery.sql"


2) I would cache the data instead of going to the database and query the data every time I need it. This reduces load on the database, improves performance, and lowers response times.
If there is only one instance of the application I would use MemoryCache, but if there are many instances I could use a distributed cache (like Redis or SQL Server Distributed Cache) so that all instances share the same cached data.


3) - New Method in "UpdateCustomersBalanceByInvoices.cs"
   - The old method runs a new query for every invoice and saves in every iteration, which is inefficient. It lacks null checks and it doesn't use transactions so some items may be updated and others not.
   - I changed the method so it first get the required customers Ids and then bring them in only one query. Then it updates all the balances in memory to avoid multiple queries. Finally, it saves all changes in only one transaction.


4) - I implemented the GetOrders() Method in the OrderRepository class
   - I also added the Order and Customer entity so it can be tested from the OrdersController I created.
   - The query is efficient and filters the data with the parameters only when provided.


5) - You can see the solution in the "WheelzyChallenge.Tools" project, "CodeFixer.cs" file.
   - You can find the tests in "WheelzyChallenge.Tools.Tests" project.